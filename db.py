import sqlite3

class DBManager:
    def __init__(self, db_path: str = "futureme.db"):
        self.db_path = db_path
        self.create_tables()
        self.default_insert()

    def connect(self):
        return sqlite3.connect(self.db_path)

    def create_tables(self):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id INTEGER PRIMARY KEY,
                    telegram_id INTEGER UNIQUE,
                    name TEXT,
                    profession TEXT,
                    experience TEXT,
                    interests TEXT,
                    expert_mode INTEGER DEFAULT 0
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS faq (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question TEXT,
                    answer TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS ai_questions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    role TEXT,
                    content TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS career_questions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS career_options (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question_id INTEGER,
                    option_text TEXT,
                    career_ids TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS careers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT,
                    linkedin_url TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS career_progress (
                    user_id INTEGER,
                    current_q INTEGER,
                    selected_careers TEXT DEFAULT '',
                    PRIMARY KEY(user_id)
                )
            """)

            conn.commit()

    def default_insert(self):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM faq")
            if cursor.fetchone()[0] == 0:
                faq_data = [
                    ("–ù—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞?", "–ù–µ—Ç, –±–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π."),
                    ("–ú–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?", "–î–∞, —á–µ—Ä–µ–∑ –º–µ–Ω—é ‚≠ê –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã."),
                    ("–ß—Ç–æ –µ—Å–ª–∏ —è –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?", "–ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å —Å–µ–±—è –ø–æ-–¥—Ä—É–≥–æ–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ ¬´—Ö–æ—á—É –∞–π—Ç–∏¬ª, –∞ ¬´–ª—é–±–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å¬ª."),
                    ("–î–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç?", "–î–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤, –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –≤—Å–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –Ω–æ–≤—ã–µ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è.")
                ]
                cursor.executemany("INSERT INTO faq (question, answer) VALUES (?, ?)", faq_data)

            cursor.execute("SELECT COUNT(*) FROM ai_questions")
            if cursor.fetchone()[0] == 0:
                ai_qs = [
                    ("–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç–µ–±–µ –Ω—Ä–∞–≤–∏–ª–∏—Å—å –≤ —à–∫–æ–ª–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"),
                    ("–¢—ã –±–æ–ª—å—à–µ –ª—é–±–∏—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏ –∏–ª–∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?"),
                    ("–ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ—Ä—è–¥–æ–∫?"),
                    ("–¢—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ—Ñ–∏—Å–µ –∏–ª–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ?"),
                    ("–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ ‚Äî –≤—ã—Å–æ–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞?"),
                    ("–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É —Ç–µ–±—è –º–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: —á–µ–º –±—ã —Ç—ã –∑–∞–Ω–∏–º–∞–ª—Å—è?")
                ]
                cursor.executemany("INSERT INTO ai_questions (question) VALUES (?)", [(q,) for q in ai_qs])

            cursor.execute("SELECT COUNT(*) FROM career_questions")
            if cursor.fetchone()[0] == 0:
                questions = [
                    "–¢–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏ –∏–ª–∏ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏?",
                    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?",
                    "–ì–¥–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å?",
                ]
                cursor.executemany("INSERT INTO career_questions (question) VALUES (?)", [(q,) for q in questions])

            cursor.execute("SELECT COUNT(*) FROM career_options")
            if cursor.fetchone()[0] == 0:
                options = [
                    (1, "üë• –° –ª—é–¥—å–º–∏", "1,2"),      # hr, —É—á–∏—Ç–µ–ª—å
                    (1, "üíª –° —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏", "3,4"), # –ü—Ä–æ–≥—Ä–∞–º–º, –¥–∏–∑–∞–π–Ω–µ—Ä
                    (2, "üí∞ –í—ã—Å–æ–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", "3"),   # –ü—Ä–æ–≥—Ä–∞–º–º
                    (2, "‚ú® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "4"),         # –î–∏–∑–∞–π–Ω–µ—Ä
                    (2, "üìñ –ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º", "1,2"),  # hr, —É—á–∏—Ç–µ–ª—å
                    (3, "üè¢ –í –æ—Ñ–∏—Å–µ", "1,3"),  # hr, –ø—Ä–ø–æ–≥—Ä–∞–º–º
                    (3, "üè† –£–¥–∞–ª—ë–Ω–∫–∞", "3,4"), # –ü—Ä–æ–≥—Ä–∞–º–º, –¥–∏–∑–∞–π–Ω–µ—Ä
                    (3, "üè´ –í —à–∫–æ–ª–µ/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ", "2"), # –£—á–∏—Ç–µ–ª—å
                ]
                cursor.executemany("INSERT INTO career_options (question_id, option_text, career_ids) VALUES (?, ?, ?)", options)

            cursor.execute("SELECT COUNT(*) FROM careers")
            if cursor.fetchone()[0] == 0:
                careers = [
                    ("HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "https://www.linkedin.com/jobs/hr/"),
                    ("–£—á–∏—Ç–µ–ª—å", "https://www.linkedin.com/jobs/teacher/"),
                    ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "https://www.linkedin.com/jobs/developer/"),
                    ("–î–∏–∑–∞–π–Ω–µ—Ä", "https://www.linkedin.com/jobs/designer/"),
                ]
                cursor.executemany("INSERT INTO careers (name, linkedin_url) VALUES (?, ?)", careers)

            conn.commit()

    def init_career_progress(self, user_id: int):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("REPLACE INTO career_progress (user_id, current_q, selected_careers) VALUES (?, ?, ?)",
                        (user_id, 1, ""))
            conn.commit()

    def update_progress(self, user_id: int, current_q: int, selected_careers: list[int]):
        with self.connect() as conn:
            cursor = conn.cursor()
            career_str = ",".join(map(str, selected_careers))
            cursor.execute("UPDATE career_progress SET current_q = ?, selected_careers = ? WHERE user_id = ?",
                        (current_q, career_str, user_id))
            conn.commit()

    def get_progress(self, user_id: int):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT current_q, selected_careers FROM career_progress WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            if not row:
                return None
            current_q, selected = row
            ids = [int(x) for x in selected.split(",") if x.strip().isdigit()]
            return {"current_q": current_q, "selected_careers": ids}

    def clear_progress(self, user_id: int):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM career_progress WHERE user_id = ?", (user_id,))
            conn.commit()


    def get_career_question(self, qid: int):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT question FROM career_questions WHERE id = ?", (qid,))
            question = cursor.fetchone()
            if not question:
                return None
            cursor.execute("SELECT id, option_text FROM career_options WHERE question_id = ?", (qid,))
            options = cursor.fetchall()
            return {"id": qid, "question": question[0], "options": options}

    def get_career_by_ids(self, ids: list[int]):
        with self.connect() as conn:
            cursor = conn.cursor()
            qmarks = ",".join("?" * len(ids))
            cursor.execute(f"SELECT name, linkedin_url FROM careers WHERE id IN ({qmarks})", ids)
            return cursor.fetchall()

    def add_user(self, telegram_id: int, name: str, profession: str, experience: str, interests: str):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("""INSERT OR REPLACE INTO users (chat_id, telegram_id, name, profession, experience, interests)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (telegram_id, telegram_id, name, profession, experience, interests))
            conn.commit()
    def add_message(self, user_id: int, role: str, content: str):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO messages (user_id, role, content) VALUES (?, ?, ?)", (user_id, role, content))
            conn.commit()

    def get_history(self, user_id: int, limit: int = 20):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT role, content FROM messages WHERE user_id = ? ORDER BY id DESC LIMIT ?", (user_id, limit))
            rows = cursor.fetchall()
            return [{"role": r, "content": c} for r, c in rows[::-1]]

    def clear_history(self, user_id: int):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM messages WHERE user_id = ?", (user_id,))
            conn.commit()



    def get_user(self, chat_id):
        with self.connect() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM users WHERE chat_id = ?", (chat_id,))
            row = cur.fetchone()
            if row:
                columns = [col[0] for col in cur.description]
                return dict(zip(columns, row))
            return None

    def set_expert_mode(self, telegram_id: int, status: bool):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET expert_mode = ? WHERE telegram_id = ?", (1 if status else 0, telegram_id))
            conn.commit()

    def get_expert_mode(self, telegram_id: int) -> bool:
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT expert_mode FROM users WHERE telegram_id = ?", (telegram_id,))
            result = cursor.fetchone()
            return bool(result[0]) if result else False


    def update_interests(self, telegram_id: int, interests: str):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET interests = ? WHERE telegram_id = ?", (interests, telegram_id))
            conn.commit()

    def get_interests(self, telegram_id: int) -> str:
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT interests FROM users WHERE telegram_id = ?", (telegram_id,))
            result = cursor.fetchone()
            return result[0] if result else ""
    def set_expert_mode(self, telegram_id: int, status: bool):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET expert_mode = ? WHERE telegram_id = ?", (1 if status else 0, telegram_id))
            conn.commit()

    def get_expert_mode(self, telegram_id: int) -> bool:
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT expert_mode FROM users WHERE telegram_id = ?", (telegram_id,))
            result = cursor.fetchone()
            return bool(result[0]) if result else False

    def get_faq(self):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT question, answer FROM faq")
            return cursor.fetchall()

    def get_ai_questions(self):
        with self.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT question FROM ai_questions")
            return [row[0] for row in cursor.fetchall()]
