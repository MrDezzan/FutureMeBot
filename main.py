import telebot
from telebot import types
from config import BOT_TOKEN
from db import DBManager
from api import GigaChatAPI


bot = telebot.TeleBot(BOT_TOKEN)
db = DBManager()
gigachat = GigaChatAPI()

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    btn2 = types.KeyboardButton("üìå –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    btn3 = types.KeyboardButton("‚≠ê –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
    btn4 = types.KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å‚Äì–û—Ç–≤–µ—Ç")
    btn5 = types.KeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ FutureMe - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã."
        "–í–µ—Ä—Å–∏—è: beta 3"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == "üìå –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
@bot.message_handler(commands=['add'])
def add(message):
    user = db.get_user(message.chat.id)
    if user:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π /update, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.")
        return

    msg = bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ò–º—è, –ü—Ä–æ—Ñ–µ—Å—Å–∏—è, –û–ø—ã—Ç, –ò–Ω—Ç–µ—Ä–µ—Å—ã):")
    bot.register_next_step_handler(msg, save_user_data)


def save_user_data(message):
    try:
        data = [x.strip() for x in message.text.split(",")]
        if len(data) != 4:
            bot.send_message(message.chat.id, "‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 4 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return

        name, profession, experience, interests = data
        db.add_user(message.chat.id, name, profession, experience, interests)
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üéØ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
def start_career_test(message):
    db.init_career_progress(message.chat.id)
    send_career_question(message.chat.id, 1)

def send_career_question(chat_id, qid):
    qdata = db.get_career_question(qid)
    if not qdata:
        finish_career_test(chat_id)
        return
    text = f"‚ùì {qdata['question']}"
    markup = types.InlineKeyboardMarkup()
    for oid, opt_text in qdata["options"]:
        markup.add(types.InlineKeyboardButton(opt_text, callback_data=f"career_opt:{qid}:{oid}"))
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("career_opt:"))
def handle_career_answer(call):
    _, qid, oid = call.data.split(":")
    qid, oid = int(qid), int(oid)

    progress = db.get_progress(call.message.chat.id)
    if not progress:
        return

    with db.connect() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT career_ids FROM career_options WHERE id = ?", (oid,))
        row = cursor.fetchone()
        if row and row[0]:
            new_ids = [int(x) for x in row[0].split(",") if x.isdigit()]
            selected = list(set(progress["selected_careers"] + new_ids))
        else:
            selected = progress["selected_careers"]

    next_q = qid + 1
    db.update_progress(call.message.chat.id, next_q, selected)

    bot.delete_message(call.message.chat.id, call.message.message_id)
    send_career_question(call.message.chat.id, next_q)

def finish_career_test(chat_id):
    progress = db.get_progress(chat_id)
    if not progress:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
        return

    ids = list(set(progress["selected_careers"]))
    if not ids:
        bot.send_message(chat_id, "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        careers = db.get_career_by_ids(ids)
        text = "üî• –¢–µ–±–µ –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏ —Ç–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:\n\n"
        for name, url in careers:
            text += f"üíº {name}\nüîó {url}\n\n"
        bot.send_message(chat_id, text)

    db.clear_progress(chat_id)


@bot.message_handler(commands=['update'])
def update(message):
    user = db.get_user(message.chat.id)
    if not user:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –µ–≥–æ —á–µ—Ä–µ–∑ /add.")
        return

    msg = bot.send_message(message.chat.id, "üîÑ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ò–º—è, –ü—Ä–æ—Ñ–µ—Å—Å–∏—è, –û–ø—ã—Ç, –ò–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    bot.register_next_step_handler(msg, update_user_data)

def update_user_data(message):
    try:
        name, profession, experience, interests = [x.strip() for x in message.text.split(",")]
        db.update_user(message.chat.id, name, profession, experience, interests)
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")


@bot.message_handler(func=lambda m: m.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@bot.message_handler(commands=['profile'])
def profile(message):
    user = db.get_user(message.chat.id)
    if not user:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π /add, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")
        return

    text = (
        f"üë§ –ò–º—è: {user['name']}\n"
        f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {user['profession']}\n"
        f"üìö –û–ø—ã—Ç: {user['experience']}\n"
        f"‚ú® –ò–Ω—Ç–µ—Ä–µ—Å—ã: {user['interests']}"
    )
    bot.send_message(message.chat.id, text)

@bot.callback_query_handler(func=lambda call: call.data == "edit_interests")
def edit_interests(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:")
    bot.register_next_step_handler(call.message, save_interests)

def save_interests(message):
    db.update_interests(message.chat.id, message.text)
    bot.send_message(message.chat.id, "‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "‚≠ê –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
def show_interests(message):
    interests = db.get_interests(message.chat.id)
    if interests:
        bot.send_message(message.chat.id, f"‚≠ê –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n{interests}")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –î–æ–±–∞–≤—å –∏—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")


@bot.message_handler(func=lambda m: m.text == "‚ùì –í–æ–ø—Ä–æ—Å‚Äì–û—Ç–≤–µ—Ç")
def faq_section(message):
    faq_list = db.get_faq()
    text = "üìñ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    for q, a in faq_list:
        text += f"‚ùì {q}\nüí° {a}\n\n"

    markup = types.InlineKeyboardMarkup()
    btn_generate = types.InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã", callback_data="generate_advices")
    btn_settings = types.InlineKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="faq_settings")
    markup.add(btn_generate, btn_settings)

    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "generate_advices")
def generate_advices(call):
    user = db.get_user(call.message.chat.id)
    if user:
        _, _, name, profession, experience, interests, *_ = user
        user_data = {
            "name": name,
            "profession": profession,
            "experience": experience,
            "interests": interests
        }
    else:
        user_data = {}

    sent = bot.send_message(call.message.chat.id, "‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤...")
    try:
        answer = gigachat.ask(
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –¥–ª—è –º–µ–Ω—è.", 
            user_data=user_data
        )
        if not answer: 
            raise ValueError("–Ω–∏—á–µ–≥–æ –Ω–µ—Ç")

        bot.delete_message(call.message.chat.id, sent.message_id)
        bot.send_message(call.message.chat.id, f"üí° {answer}")

    except Exception as e:
        import traceback
        traceback.print_exc()  
        bot.delete_message(call.message.chat.id, sent.message_id)
        bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã.")









@bot.callback_query_handler(func=lambda call: call.data == "faq_settings")
def faq_settings(call):
    status = db.get_expert_mode(call.message.chat.id)
    markup = types.InlineKeyboardMarkup()
    if status:
        btn = types.InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞", callback_data="toggle_expert")
    else:
        btn = types.InlineKeyboardButton("üü¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞", callback_data="toggle_expert")
    markup.add(btn)
    bot.send_message(call.message.chat.id, "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=markup)







@bot.callback_query_handler(func=lambda call: call.data == "toggle_expert")
def toggle_expert(call):
    user_id = call.message.chat.id
    current = db.get_expert_mode(user_id)
    db.set_expert_mode(user_id, not current)

    if not current:
        bot.answer_callback_query(call.id, "üü¢ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω")
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏ —ç–∫—Å–ø–µ—Ä—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.")
    else:
        bot.answer_callback_query(call.id, "üî¥ –≠–∫—Å–ø–µ—Ä—Ç –æ—Ç–∫–ª—é—á—ë–Ω")
        bot.send_message(user_id, "–≠–∫—Å–ø–µ—Ä—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")


@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_user_message(message):
    user = db.get_user(message.chat.id)
    if not user:
        return

    if user.get("expert_mode"):
        db.add_message(message.chat.id, "user", message.text)

        history = db.get_history(message.chat.id, limit=20)

        sent = bot.send_message(message.chat.id, "ü§î –≠–∫—Å–ø–µ—Ä—Ç –¥—É–º–∞–µ—Ç...")
        try:

            answer = gigachat.ask(history)

            db.add_message(message.chat.id, "assistant", answer)

            bot.delete_message(message.chat.id, sent.message_id)
            bot.send_message(message.chat.id, f"üß† –≠–∫—Å–ø–µ—Ä—Ç: {answer}")
        except Exception as e:
            import traceback
            traceback.print_exc()
            bot.delete_message(message.chat.id, sent.message_id)
            bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É.")
    else:
        return



if __name__ == "__main__":
    bot.polling(none_stop=True)
